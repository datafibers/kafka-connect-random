package sasakitoa.kafka.connect.random;

import org.apache.kafka.common.config.ConfigDef;
import org.apache.kafka.common.utils.AppInfoParser;
import org.apache.kafka.connect.connector.Task;
import org.apache.kafka.connect.errors.ConnectException;
import org.apache.kafka.connect.source.SourceConnector;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import sasakitoa.kafka.connect.random.params.CommonParams;
import sasakitoa.kafka.connect.random.generator.Generator;

/**
 * RandomSourceConnector is connector which will send value generated by specified generator.
 */
public class RandomSourceConnector extends SourceConnector {

    Class<? extends Generator> generatorClass;

    private String topic = CommonParams.TOPIC_DEFAULT;

    private long numMessages = CommonParams.NUM_MESSAGES_DEFAULT;

    private boolean taskSummaryEnable = CommonParams.SUMMARY_ENABLE_DEFAULT;

    private Map<String, String> generatorConfigs;

    private final ConfigDef CONFIG_DEF = new CommonParams().setConfig(new ConfigDef());

    @Override
    public String version() {
        return AppInfoParser.getVersion();
    }

    @Override
    public Class<? extends Task> taskClass() {
        return RandomSourceTask.class;
    }

    @Override
    public void start(Map<String, String> props) {
        String topic = props.get(CommonParams.TOPIC);
        if(topic != null && !topic.isEmpty()) {
            this.topic = topic;
        }

        this.taskSummaryEnable = Boolean.parseBoolean(props.getOrDefault(CommonParams.SUMMARY_ENABLE, String.valueOf(CommonParams.SUMMARY_ENABLE_DEFAULT)));

        String numMessagesStr = props.get(CommonParams.NUM_MESSAGES);
        if(numMessagesStr != null && !numMessagesStr.isEmpty()) {
            try {
                this.numMessages = Long.parseLong(numMessagesStr);
            } catch(NumberFormatException ex) {
                throw new ConnectException(CommonParams.NUM_MESSAGES + " must be long, but " + numMessages + " was specified.");
            }
        }

        String generatorStr = props.get(CommonParams.GENERATOR_CLASS);
        if(generatorStr == null || generatorStr.isEmpty()) {
            generatorStr = CommonParams.GENERATOR_CLASS_DEFAULT;
        }
        try {
            generatorClass = (Class<? extends Generator>)Class.forName(generatorStr);
            Generator generatorObj = generatorClass.newInstance();
            generatorObj.setConfigDef(CONFIG_DEF);
            generatorConfigs = generatorObj.setTaskConfigs(props);
        } catch(ClassNotFoundException ex) {
            throw new ConnectException("Generator class \"" + generatorStr + "\" is not found.");
        } catch(ClassCastException ex) {
            throw new ConnectException("Generator class \"" + generatorStr + "\" does not extend " + Generator.class.getName() + ".");
        } catch(InstantiationException ex) {
            throw new ConnectException("Failed to create instance of Generator class \"" + generatorStr + "\".");
        } catch(IllegalAccessException ex) {
            throw new ConnectException("Generator class \"" + generatorStr + "\" is not accessible.");
        }
    }

    @Override
    public void stop() {
        // Nothing to do.
    }

    @Override
    public List<Map<String, String>> taskConfigs(int maxTasks) {
        List<Map<String, String>> configs = new ArrayList<>(maxTasks);
        for(int i = 0; i < maxTasks; i++) {
            Map<String, String> config = new HashMap<>();
            config.put(CommonParams.TASK_ID, Integer.toString(i));
            config.put(CommonParams.GENERATOR_CLASS, generatorClass.getName());
            config.put(CommonParams.TOPIC, topic);
            config.put(CommonParams.SUMMARY_ENABLE, String.valueOf(taskSummaryEnable));

            if(numMessages >= 0) {
                long numMessagesParTask = numMessages / (long) maxTasks + (numMessages % maxTasks >= i + 1 ? 1 : 0);
                config.put(CommonParams.NUM_MESSAGES, Long.toString(numMessagesParTask));
            } else {
                config.put(CommonParams.NUM_MESSAGES, Integer.toString(-1));
            }

            if(generatorConfigs != null) {
                config.putAll(generatorConfigs);
            }
            configs.add(config);
        }
        return configs;
    }

    @Override
    public ConfigDef config() {
        return CONFIG_DEF;
    }
}
